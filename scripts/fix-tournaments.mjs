#!/usr/bin/env node
import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = process.env.VITE_SUPABASE_URL;
const SERVICE_ROLE_KEY = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_URL || !SERVICE_ROLE_KEY) {
  console.error('‚ùå VITE_SUPABASE_URL et SERVICE_ROLE_KEY requis');
  process.exit(1);
}

const supabase = createClient(SUPABASE_URL, SERVICE_ROLE_KEY);

async function fixTournaments() {
  console.log('üîß R√©paration du syst√®me de tournois...\n');

  // 1. V√©rifier les tables
  console.log('1Ô∏è‚É£ V√©rification des tables...');
  const tables = ['tournaments', 'tournament_registrations', 'tournament_matches'];

  for (const table of tables) {
    const { error } = await supabase.from(table).select('count').limit(1);
    if (error) {
      console.error(`   ‚ùå Table ${table} manquante ou inaccessible`);
      console.log("   ‚Üí Appliquez les migrations : pnpm run db:push");
      process.exit(1);
    }
    console.log(`   ‚úì Table ${table} OK`);
  }

  // 2. Compter les tournois actifs
  console.log('\n2Ô∏è‚É£ V√©rification des tournois...');
  const { data: tournaments, count } = await supabase
    .from('tournaments')
    .select('*', { count: 'exact' })
    .eq('status', 'active');

  console.log(`   Tournois actifs : ${count || 0}`);

  if ((count || 0) === 0) {
    console.log('   ‚ö†Ô∏è  Aucun tournoi actif - d√©clenchement de sync-tournaments...');

    // Appeler la fonction
    const functionsUrl = SUPABASE_URL.replace('.supabase.co', '.functions.supabase.co');
    const response = await fetch(`${functionsUrl}/sync-tournaments`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        apikey: SERVICE_ROLE_KEY,
        Authorization: `Bearer ${SERVICE_ROLE_KEY}`,
      },
      body: JSON.stringify({}),
    });

    if (response.ok) {
      const data = await response.json();
      console.log('   ‚úì Tournois cr√©√©s:', data);
    } else {
      console.error('   ‚ùå √âchec sync-tournaments:', await response.text());
    }
  }

  // 3. V√©rifier les r√®gles disponibles
  console.log('\n3Ô∏è‚É£ V√©rification des r√®gles...');
  const { data: rules, count: rulesCount } = await supabase
    .from('chess_rules')
    .select('*', { count: 'exact' })
    .eq('status', 'active')
    .eq('is_functional', true);

  console.log(`   R√®gles actives : ${rulesCount || 0}`);

  if ((rulesCount || 0) < 5) {
    console.log('   ‚ö†Ô∏è  Peu de r√®gles disponibles - les tournois utiliseront les fallbacks');
  }

  console.log('\n‚úÖ R√©paration termin√©e !');
  console.log('\nüìã Prochaines √©tapes :');
  console.log("   1. V√©rifiez que les Edge Functions sont d√©ploy√©es");
  console.log("   2. Testez l'inscription √† un tournoi depuis l'UI");
  console.log("   3. V√©rifiez les logs Supabase en cas d'erreur");
}

fixTournaments().catch(console.error);
